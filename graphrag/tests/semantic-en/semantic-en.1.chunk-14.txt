

- **Internal Process**: Defined in Yao's source code, you can find them in the Yao respository.
- **Custom Process**: Written in TypeScript or JavaScript, located in the `scripts` directory of your project.
- **GRPC Plugin**: Written in any language, located in the `plugins` directory of your project.


To run a process, use the `yao run` command.

For more information, see: ðŸ‘‰ **[Process References](../references/yao-process)**


Examples:

```bash
# Execute an internal process
yao run utils.app.Ping   # This will return the version of Yao.


# Execute a custom process defined using TypeScript
yao run scripts.test.Hello 'Yao!'   # Returns 'Hello, Yao!'

yao run scripts.test.Pets cat  # Returns a list of pets in the cat category.

```
 pets in the cat category.

```

**scripts/test.ts**

```typescript
import { Process } from "@yao/runtime";

function Hello(name: string): string {
  return `Hello, ${name}!`;
}

function Pets(category?: string): Record<string, any> {
  category = category || "dog";
  const pets = Process("models.tests.pet.Get", {
    select: ["id", "name"],
    wheres: [{ column: "category", value: category }],
  });

  return pets;
}
```

### Yao Runtime

Yao Runtime is a server-side execution environment for running processes.

- **Internal Processes** written in Go, executed directly.
- **Custom Processes** written in TypeScript or JavaScript, executed using the V8 engine. Yao provides APIs like `Process`, `File System`, and `HTTP Request` to write these processes.

**Note**: **Yao Runtime is not Node.js**. It's specifically for running processes and does not support Node.js APIs.