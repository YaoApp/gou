lly, with seamless switching between approaches.

Use the Yao runtime to execute the code, and its built-in HTTP server to serve the application.

## Yao Application

A Yao application is a collection of widget DSLs and custom processes written in TypeScript or JavaScript.

For websites, the SUI template engine (new in version 0.10.4) can help you build the web pages you need.

Each widget type has its own directory in the project root, such as `models`, `tables`, `forms`, `apis`, `etc`.

The DSL source files are named in lowercase with the `.[TYPE].yao` extension, for example, `article.mod.yao`.

Custom process files are lowercase in the `scripts` directory, e.g., `article.ts`. The process name is `scripts.article.[FUNCTION_NAME]`.

### Directory Structure

The yao application directory structure is as follows:

```bash
app
├── aigcs # AIGC Widgets: use the prompt as a process
├── apis  # API Widgets: define the REST API
├── app.yao # Application Configuration
├── charts # Chart Widgets: chart-type pages in the admin panel
├── connectors  # AI Connectors, Database Connectors, Redis Connectors, etc.
├── dashboards  # Dashboard Widgets: dashboard-type pages in the admin panel
├── data    # The default application data directory, use the File System Process or JSAPI to access. Custom data directory can be set in environment variables.
├── db      # The sqlite database directory, the default option of database. If use another database, this directory is not necessary.
├── flows   # Flow Widgets: define the process flow
├── forms   # Form Widgets: form-type pages in the admin panel
├── icons   # The application icons used in the admin panel
├── langs   # I18n language files used in the admin panel
├