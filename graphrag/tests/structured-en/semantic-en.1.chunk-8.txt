or Chart. It could also be a Data Model, API, Store, Flow, etc.

Each Widget has a set of Processes, and some Widgets have a set of REST APIs. It can be used in other widgets, custom processes, or integrated into other applications.

A Widget is described using DSL, which is in JSON format. It can be generated by AI, created via a GUI, or written manually.

For more information, see: ðŸ‘‰ **[DSL References](../references/yao-dsl)**

**Model Widget**

Model Widget is used to describe the data structure, it same as the database table schema.

The Model DSL contains a set of processes to operate on the data, such as CRUD, Query, etc. You can use it directly.

```json
// Model DSL
{
  "name": "Article",
  "table": { "name": "article", "comment": "Article" },
  "columns": [
    { "name": "id", "comment": "ID", "type": "ID", "label": "ID" },
    { "label": "Title", "name": "title", "type": "string" },
    { "label": "Summary", "name": "summary", "type": "string" }
  ]
}
```

```bash
# Use the process to find the data
yao run models.article.Find 1 '::{}'
```

**Table Widget**

Table Widget is used to display the data in a admin panel. bind to the Model Widget, automatically generate the basic CRUD operations.

The Table DSL contains a set of processes and REST APIs to operate on the data, such as Find, Search etc. You can use it directly.

```json
// Table DSL
{
  "name": "Articles",
  "action": {
    "bind": { "model": "article", "option": { "form": "article" } }
  }
}
```

```bash
# Use the process to search the data
yao run yao.tables.Search article '::{}' 1 10
```

```bash
# Use the REST API to search the data
curl --request GET \
  --url https://127.0.0.1:5099/api/__yao/table/article/search \
  --header 'Content-Type: application/json' \
  --header 'Authorization: Bearer 